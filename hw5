```
public class Main {

	public static void main(String[] args) {

		Student student1 = new Student("Damian", "Grey", Gender.Male, 1, "Main");
		Student student2 = new Student("Bruce", "Wayne", Gender.Male, 2, "Main");
		Student student3 = new Student("Zoe", "Fisher", Gender.Female, 3, "Main");
		Student student4 = new Student("Samuel", "Geroni", Gender.Male, 4, "Main");
		Student student5 = new Student("Salvador", "Dali", Gender.Male, 5, "Main");
		Student student6 = new Student("Agatha", "May", Gender.Female, 6, "Main");
		Student student7 = new Student("Jacob", "Frye", Gender.Male, 7, "Main");
		Student student8 = new Student("Maria", "Corleone", Gender.Female, 8, "Main");
		Student student9 = new Student("Julia", "Louis", Gender.Female, 9, "Main");
		Student student10 = new Student("Ken", "Karson", Gender.Male, 10, "Main");
		Student student11 = new Student("Christian", "Bale", Gender.Male, 11, "Main");

		Group group1 = new Group();

		try {
			group1.addStudent(student1);
			group1.addStudent(student2);
			group1.addStudent(student3);
			group1.addStudent(student4);
			group1.addStudent(student5);
			group1.addStudent(student6);
			group1.addStudent(student7);
			group1.addStudent(student8);
			group1.addStudent(student9);
			group1.addStudent(student10);
			group1.addStudent(student11);

		} catch (GroupOverflowException e) {
			System.out.println();
			System.out.println(e.getMessage());
			System.out.println();
		}

		try {
			System.out.println(group1.searchStudentByLastName("Frye"));
			System.out.println();
			System.out.println(group1.searchStudentByLastName(student11.getLastName())); 
			
		} catch (StudentNotFoundException e) {
			System.out.println(e.getMessage());
		}

		System.out.println();

		group1.removeStudentByID(5);
		group1.removeStudentByID(7);
		group1.removeStudentByID(12); 
	}
}
```
```
public class Person {

	private String name;
	private String lastName;
	public Gender gender;

	public Person(String name, String lastName, Gender gender) {
		super();
		this.name = name;
		this.lastName = lastName;
		this.gender = gender;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public Gender getGender() {
		return gender;
	}

	public void setGender(Gender gender) {
		this.gender = gender;
	}

	@Override
	public String toString() {
		return "Person [name=" + name + ", lastName=" + lastName + ", gender=" + gender + "]";
	}
}
```
```
public enum Gender {

	Male("M-Student "), Female("F-Student ");

	private String getFilePermissions = "";

	private Gender(String getFilePermissions) {
		this.getFilePermissions = getFilePermissions;
	}

	public String getFilePermissions() {
		return getFilePermissions;
	}

	public void setFilePermissions(String getFilePermissions) {
		this.getFilePermissions = getFilePermissions;
	}
}
```
```
import java.util.Arrays;

public class Group {

	private String groupName;
	private final Student[] students;

	public Group() {
		super();
		students = new Student[10];
	}

	public String getGroupName() {
		return groupName;
	}

	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}

	public Student[] getStudents() {
		return students;
	}

	
	public void addStudent(Student student) throws GroupOverflowException {

		for (int i = 0; i < students.length; i++) {
			if (students[i] == null) {
				students[i] = student;
				System.out.println(student.gender.getFilePermissions() + student.getName() + " " + student.getLastName()
						+ " is in a group " + student.getGroupName() + "!");
				return;
			}
		}

		throw new GroupOverflowException(student.gender.getFilePermissions() + student.getName() + " "
				+ student.getLastName() + " isn't in a group,\ngroup " + student.getGroupName() + " is full :(");
	}

	
	public Student searchStudentByLastName(String lastName) throws StudentNotFoundException {

		for (int j = 0; j < students.length; j++) {
			if (students[j] != null) {
				if (students[j].getLastName() == lastName) {
					return students[j];
				}
			}
		}
		throw new StudentNotFoundException("Student not found,\nor hasn't been added yet  :(");
	}

	
	public boolean removeStudentByID(int id) {

		for (int k = 0; k < students.length; k++) {
			if (students[k] != null) {
				if (students[k].getId() == id) {
					students[k] = null;
					System.out.println("Student by report card number " + id + " kicked out!");
					return true;
				}
			}
		}
		System.out.println("Student by report card number " + id + " not found :(");
		return false;
	}

	@Override
	public String toString() {
		return "Group [groupName=" + groupName + ", students=" + Arrays.toString(students) + "]";
	}
}
```
```
public class Student extends Person {

	private int id;
	private String groupName;

	public Student(String name, String lastName, Gender gender, int id, String groupName) {
		super(name, lastName, gender);
		this.id = id;
		this.groupName = groupName;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getGroupName() {
		return groupName;
	}

	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}

	@Override
	public String toString() {
		return gender.getFilePermissions() + getName() + " " + getLastName() + ",\nreport card number " + id + ",\ngroup "
				+ groupName + " :)";
	}
}
```
```
public class StudentNotFoundException extends Exception {

	public StudentNotFoundException() {
		super();
	}

	public StudentNotFoundException(String message, Throwable cause) {
		super(message, cause);
	}

	public StudentNotFoundException(String message) {
		super(message);
	}

	public StudentNotFoundException(Throwable cause) {
		super(cause);
	}
}
```
```
public class GroupOverflowException extends Exception {

	public GroupOverflowException() {
		super();
	}

	public GroupOverflowException(String message, Throwable cause) {
		super(message, cause);
	}

	public GroupOverflowException(String message) {
		super(message);
	}

	public GroupOverflowException(Throwable cause) {
		super(cause);
	}
}
```
